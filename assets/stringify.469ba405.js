function e(e){const t=new Map;let n=1;JSON.stringify(e,((e,r)=>{if("object"==typeof r){const e=t.get(r);if(e&&null!=r)return null==e.idx&&(e.idx="@"+n++),void e.seen_count++;t.set(r,{idx:null,seen_count:1})}return r}));const r=new Map;let o=1;const u={};for(const[s,{idx:i,seen_count:f}]of t)1===f&&s!==e||(u[null!=i?i:"@root"]=JSON.parse(JSON.stringify(s,((e,n)=>{var u,s;if("object"==typeof n&&""!==e){const e=t.get(n);if(e&&e.seen_count>1)return{$ref:null!=(u=e.idx)?u:"@root"}}if("symbol"==typeof n){return{$sym:null!=(s=r.get(n))?s:r.set(n,{symidx:"#"+o+++"#"+n.toString()}).get(n)}}return n}))));return u}function t(e){const t=JSON.parse(e),n=new Map,r=new Map,o=e=>{if("object"==typeof e){if(null==e)return;if("$ref"in e)return{value:u(e.$ref)};if("$sym"in e){const t=e.$sym,n=r.get(t);if(n)return{value:n};const o=Symbol(t);return r.set(t,o),{value:o}}}},u=e=>n.has(e)?t[e]:(n.set(e,!0),s(t[e])),s=e=>{if("object"==typeof e){if(Array.isArray(e))for(let t=0;t<e.length;t++){const n=o(s(e[t]));n&&(e[t]=n.value)}else{if(null==e)return null;for(const[t,n]of Object.entries(e)){const r=o(s(n));r&&(e[t]=r.value)}}return e}return e};return u("@root")}export{t as destringify,e as stringify};
